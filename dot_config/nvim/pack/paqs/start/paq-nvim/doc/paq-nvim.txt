*paq-nvim.txt*  Package manager for Neovim >= v0.5.  Last change: 2021-12-10
*paq-nvim*
*paq*

Author: Sergio Alejandro Vargas    <savargasqu+git@unal.edu.co>

License: MIT

==============================================================================
CONTENTS                                                        *paq-contents*

  Introduction                                           |paq-introduction|
  Usage                                                  |paq-usage|
  Functions and Commands                                 |paq-commands|
  Package options                                        |paq-options|
  Autocommands                                           |paq-autocommands|
  Paq directory                                          |paq-dir|
  Paq log                                                |paq-log|
  Troubleshooting                                        |paq-troubleshooting|
  Bootstrapping                                          |paq-bootstrapping|
  Miscellaneous                                          |paq-misc|
    Using local packages
    Lazy loading


==============================================================================
INTRODUCTION                                                *paq-introduction*

Paq is a Neovim package manager. It can install, update and remove packages
from any valid git repository, and it includes a familiar shorthand for
GitHub repositories.

Paq is written in Lua. It uses the |loop| API to install and update packages
asynchronously, and it stores packages in |packpath| directories.

Paq is for Neovim users who use Lua as their configuration language. It was
written to be a wrapper around existing Neovim features, and to have a simple
and familiar interface for declaring packages.

Paq doesn't modify the |runtimepath|. Nowadays Neovim provides more structured
ways to handle package loading, that can be used without any any special
scripting.

NOTE: Requirements and installation instructions can be found in the README.


==============================================================================
USAGE                                                              *paq-usage*

To get started with Paq:

 1. Import the `paq` module:
 >
    local paq = require("paq")    -- Module
<

 2. Call the paq module with a the list of packages you want to install.
    Each entry in the list is a package repository, for example:
>
    paq {
        "savq/paq-nvim";            -- Paq manages itself

        "neovim/nvim-lspconfig";
        "nvim-treesitter/nvim-treesitter"
        "hrsh7th/nvim-compe";
        "lervag/vimtex";
    }
<

 3. Call the `:PaqInstall` command.

That's it!


==============================================================================
FUNCTIONS AND COMMANDS                                          *paq-commands*
                                                               *paq-functions*

The Paq module exports multiple functions. Most of these functions have a
command alias to make them easier to call on demand. Assuming the module is
imported as `paq`, the functions are:


|paq.__call|                                                      *paq.__call*

  The `paq` module is itself a callable object. It takes as argument a list of
  packages. Each element of the list can be a table or a string.

  When the element is a table, the first value has to be a string with the
  name of the repository, like: `'<GitHub-username>/<repository-name>'`.
  The other key-value pairs in the table have to be named explicitly, see
  |paq-options|. When the element is a string, it works as if it was the first
  value of the table, and all other options will be set to their default
  values.

  Note: Lua can elide parentheses when passing a table to a function,
  so you can always call `paq` without parentheses.


|paq.install|                                                    *paq.install*
                                                               *:PaqInstall*
  Installs all packages listed on your configuration, if a package is already
  installed, the function ignores it. If a package has a `run` argument, it'll
  be executed after a package is installed.


|paq.update|                                                      *paq.update*
                                                                *:PaqUpdate*
  Updates the installed packages listed on your configuration. If a package
  hasn't been installed with |PaqInstall|, the function ignores it.
  If a package had changes and it has a `run` argument, then the `run`
  argument will be executed.


|paq.clean|                                                        *paq.clean*
                                                                 *:PaqClean*
  Removes packages found on |paq-dir| that aren't listed in your
  configuration.


|paq.sync|                                                          *paq.sync*
                                                                  *:PaqSync*
  Executes |paq.clean|, |paq.update|, and |paq.install|. Note that all
  paq operations are performed asynchronously, so messages might be printed
  out of order.


|paq._run_hook|                                                *paq._run_hook*
                                                               *:PaqRunHook*
  Takes as single argument a string with the name of a package. If the package
  has a `run` hook (functions and shell commands), it will execute the hook.
  This can be used when a hook fails, to run a hook without a package having
  changed, or for other debugging purposes.


|paq.list|                                                          *paq.list*
                                                                  *:PaqList*
  Lists installed packages as well as packages that were recently removed.
  Recently installed or updated packages are marked with a `+` and `*`,
  respectively.


|paq.log_open|                                                  *paq.log_open*
                                                               *:PaqLogOpen*
  Opens the |paq-log| file in a split window.


|paq.log_clean|                                                *paq.log_clean*
                                                              *:PaqLogClean*
  Deletes the |paq-log| file.


|paq:setup|                                                        *paq:setup*

  Method to configure specific global behavior.  It can take a table with the
  following keys:

    `path`
    String that determines where Paq should install packages. It overwrites
    the default value for |paq-dir|. `path` should still be a valid |packages|
    directory, Paq won't modify the 'runtimepath'. This option exists mainly
    to allow testing without altering a user's configuration.

    Default value: |paq-dir|

    `verbose`
    Boolean that determines whether paq should print `(up-to-date) pkg` for
    packages that were not updated.

    Default value: `false`

  Note that unlike most Lua plugins, paq:setup is a method, not a function.
  This allows chaining it with the list of packages without needing to
  bind `"paq"` locally, for example:
>
    require("paq"):setup({verbose=false}) {
        "savq/paq-nvim";
        "neovim/nvim-lspconfig";
        "nvim-treesitter/nvim-treesitter"
    }
<

|paq.paq|

  The paq function is deprecated. The `paq` module is now a callable that
  takes a list of packages.


==============================================================================
PACKAGE OPTIONS                                                  *paq-options*

Each element in the list of packages can be a table with named options.
These options don't need to be in any particular order, except for the package
string (see 1 below).

The options are the following:

`1` (package string)

  The first entry may be a string like `"<GitHub-username>/<repo-name>"`
  indicating a GitHub repository. The name of the package will be inferred from
  this string, i.e. `<repo-name>`.  If `url` is unset, this option is
  required.

  Default value: `nil`


`as`
  String indicating the alias or local name of the package. This determines
  the name of the directory where Paq will download the package.

  Default value: `nil`


`branch`
  String with the name of a branch of the git repository. Paq will fetch
  and pull changes from this branch.

  Default value: `nil`


`opt`
  Boolean indicating whether the package is optional or not. If set,
  the package will be in the optional packages directory. See |packages|
  and |packadd|.

  Default value: `false`


`pin`
  Boolean indicating whether the package is pinned or not. If a package is
  pinned then it will be installed, but it will not be updated when calling
  |PaqUpdate|.

  Default value: `false`


`run`
  Either a string or a function to be executed after installing or updating
  a package. Useful for packages that require extra configuration or
  building binaries.

  If a string, Paq will execute the string as a shell command in the 
  directory of the package.

  If a function, Paq will execute the function right after installing
  the package. The function cannot take any arguments.

  Note that in Lua, you can wrap a VimL function like so:
>
    { "<name-of-package>", run=vim.fn["<name-of-viml-function>"] };
<
  Default value: `nil`


`url`
  String indicating the URL of the git repository.

  If the `url` is set, Paq will try to infer the name of the repository from
  it. For example, for `url="htttps://domain.com/some/path/repo-vim.git"` it
  would be `repo-vim`.

  For convenience, if `url` is unset, Paq will try to find the repository on
  GitHub.com, based on the package string.

  Default value: `"https://github.com/" .. "<GitHub-username>/<repo-name>"`


------------------------------------------------------------------------------
Package Name Inference~

You might have noticed the local name of the package may depend on three of
the options given above. To reiterate, the precedence order of these options is:

  1. `as` option
  2. `url` option
  3. Package string (`1`)

`as` has the highest precedence, but it doesn't inform Paq about the origin of
the package, so you always have to use it along side the package string or
`url`. The package string and `url` may be used on their own, but will set the
local name of the package to that of the remote repository. In practice, this
means you never have to use all three together, and most of the time the
package string alone will be enough.


------------------------------------------------------------------------------
Example~

The language client `coc.nvim` recommends installing the release branch of
their repository. If we also wanted to install it as an optional package,
we could call `paq` like:
>
    local paq = require("paq")
    paq {
        {"neoclide/coc.nvim", opt=true, branch="release"};
    }
<

==============================================================================
PAQ AUTOCOMMANDS                                            *paq-autocommands*
                                                              *PaqDoneInstall*
                                                               *PaqDoneUpdate*

Paq provides |User| events for its async operations, each event has the name
`PaqDone` followed by the name of an operation:
 
    `PaqDoneInstall` run after `PaqInstall`
    `PaqDoneUpdate` runs after `PaqUpdate`
    `PaqDoneSync` runs after `PaqSync`

You can define an |autocmd| for these events using the usual syntax:
>
    autocmd User PaqDoneInstall <your-commands>
<
This is useful for bootstrapping or calling Paq in headless mode. See the
section on |paq-bootstrapping|.

NOTE: `PaqClean` is currently synchronous so there's no autocommand for it.


==============================================================================
PAQ DIRECTORY                                                        *paq-dir*

Paq installs packages using Neovim's |packages| convention, which itself
follows the XDG Base Directory specification. You can find the default
directory where Paq installs packages by running the command:
>
    :echo stdpath('data') .. '/site/pack/paqs'
<

If you have packages that aren't managed by Paq, you shouldn't put them on
Paq's directory, since |paq.clean| could delete them.


==============================================================================
PAQ LOG                                                              *paq-log*

Paq writes the `stderr` output of external processes to a log file.
The log file can be found at:
>
    :echo stdpath('cache') .. '/paq.log'
<

==============================================================================
TROUBLESHOOTING                                          *paq-troubleshooting*

Here's a list of steps to take when something goes wrong with Paq:

1. Check Paq's previous messages with |:messages|

2. Check the list of installed and recently removed packages with |:PaqList|.

3. If you see an error message or a package isn't listed as expected, check
  Paq's log with |:PaqLogOpen|. The log records everything written to `stderr`
  so you might want to look from the bottom up.

4. If you think the error wasn't caused by git (or another external program
  called with a hook), consider opening an issue on the paq-nvim GitHub
  repository.

Some common issues are listed below.

------------------------------------------------------------------------------
GitHub Credentials~

Paq clones repositories using HTTPS, which might require you to provide your
GitHub credentials. It's _strongly_ encouraged to set-up your GitHub
credentials before using Paq. Consult the relevant git and GitHub
documentation.


==============================================================================
BOOTSTRAPPING                                              *paq-bootstrapping*

You can use Paq programmatically to install your packages in |--headless|
mode. This can make it easier to set-up your development environment
automatically.

An example of how to "bootstrap" Paq is presented below:
>
  -- In ~/.config/nvim/lua/bootstrap.lua

  local PKGS = {
    "savq/paq-nvim";
    -- List your packages here!
  }

  local function clone_paq()
    local path = vim.fn.stdpath('data') .. '/site/pack/paqs/start/paq-nvim'
    if vim.fn.empty(vim.fn.glob(path)) > 0 then
      vim.fn.system {
        'git',
        'clone',
        '--depth=1',
        'https://github.com/savq/paq-nvim.git',
        path
      }
    end
  end

  local function bootstrap_paq()
    clone_paq()

    -- Load Paq
    vim.cmd('packadd paq-nvim')
    local paq = require('paq')

    -- Exit nvim after installing plugins
    vim.cmd('autocmd User PaqDoneInstall quit')

    -- Read and install packages
    paq(PKGS)
    paq.install()
  end

  return { bootstrap_paq = bootstrap_paq }
<

Now, installing your packages should only require calling the `bootstrap`
function from your shell:
>
    nvim --headless -u NONE -c 'lua require("bootstrap").bootstrap_paq()'
<

You can adjust the script above to suit your needs. You might only want to
clone Paq automatically without installing packages, or clone packages only if
Paq is already installed.


==============================================================================
MISCELLANEOUS                                                       *paq-misc*

These are some features related to using packages, which probably don't
require Paq. Either because there's already a way to do it in Neovim, or
because they're out of scope for the project.


------------------------------------------------------------------------------
Using local packages~

You don't need Paq to use local packages. Neovim already provides ways to
load a local plugin, namely:

- Add it to a directory in |packpath| (different from |paq-dir|)
- Modify the |runtimepath| directly

The first option is the easiest, though your plugin can end up pretty deep
in a directory hierarchy.

The second option just requires you to concatenate the path to the plugin to
your `runtimepath`. In Lua, this looks like:
>
    vim.opt.runtimepath:append("~/path/to/your/plugin")
<
Remember to use an absolute path.


------------------------------------------------------------------------------
Lazy loading~

Paq doesn't provide a mechanism to lazy load packages. Before considering
if a package needs to be lazy loaded:

1. Be sure to profile your startup time with the |--startuptime| flag.
2. For VimL plugins, check if the package uses the |autoload| feature.
3. For Lua plugins, check if the package is properly modularized in the `lua/`
   directory.

If the package doesn't do 2. or 3. consider opening an issue in that package's
issue tracker rather than Paq's. It'll help users of other package managers
too.

If you've checked all that and still think that the package _has_ to be lazy
loaded, you can declare the package as optional, and call |packadd| when
needed.

You can use an |autocommand| to do the lazy loading, but currently there isn't
a way to declare an autocommand using only Lua.

Example:
>
    require("paq") {
      {"author/heavy-plugin", opt=true};
    }
    vim.cmd [[autocmd Filetype ruby packadd! heavy-plugin]]
<

==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
